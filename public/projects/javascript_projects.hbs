<!DOCTYPE html>
<html lang="en-US">

  <head>
    <title> wavelet.online </title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="UTF-8">

    {{> favicons }}

    <link rel="stylesheet" type="text/css" href="/teamk-reset.css">
    <link rel="stylesheet" type="text/css" href="/main_javascript_projects.css">
  </head>

  <body>

    {{> header }}

    <div>

      <p><a href="https://github.com/Koceto1973/node-chat-app" target="_blank">This</a> Node.js express application was build upon
        socket.io and provides instant communication between server and clients, both hosted on Heroku servers. Basic functionalities 
      as emits, broadcast emits, emits with acknowledgements, utilizing namespaces and rooms were explored. More html template injection
      tools were mastered, on top of JQuery framework syntax.</p>

      <p><a href="https://github.com/Koceto1973/node-todo-api" target="_blank">This</a> REST API Node.js express project is designed to
         serve as backend of 'To Do' task managers, using Mongo DB as a storage. Basic CRUD functionality for both users and notes 
         is presented, along with build in testing for each route, in a separete module. Mongoose model/schema functions were used 
         for db handling. Heroku services were used for the API hosting. Postman and Robo 3T were used during during both 
         development and testing phases. Postman's handy features Collections, Environments and environment variables were used 
         to ease the process. Local storage was made modular by adding separate database designated only to testing. Good practice 
        in auth services ( bcryptjs, crypto-js libraries ), express, mongoose middlewares and supertest/expect/Jestjs functionalities.</p>

      <p><a href="https://github.com/Koceto1973/Node-testing" target="_blank">This</a> pure Node.js exercise was dedicated
         to various app testing options. Mocha manual and auto testing, using assertion library, async code testing with done(),
         express apps specific testing by supertest library, tests organization with describe() and test spies were practiced. </p>

      <p><a href="https://github.com/Koceto1973/Hello-Express" target="_blank">This</a> pure Node.js exercise put emphasis on
      the web servers creation using express ( and it's middlewares functionality ), handlebars library for routing code 
      and content templating/ data injection. App deployment was completed using Heroku services. </p>

      <p><a href="https://github.com/Koceto1973/weather-app" target="_blank">This</a> pure Node.js app presents simple
        meteo forecast provider controlled from the command line. Few modules were used, aiming to properly chain the 
        required callbacks fetching the location first, then the meteo. App was rebuild in ES6 way, using Promises.</p>

      <p><a href="https://github.com/Koceto1973/cli-notes" target="_blank">This</a> pure Node.js app presents simple
       notes manager controlled from the command line. Basic debuging techniques from both terminal and Chrome dev tools
     were practiced, FS, OS core modules and Yargs were brought in.</p>

      <p><a href="https://github.com/Koceto1973/LaptopStore" target="_blank">Here</a>
       are the first green lines of code reaching to server side from the client browser - my intro project to Node.js.
     Fs, Http and Url modules were scratched over to build simple laptop store overview and detailed pages. Images routing
     was also tested along with some already regular JS stuff like html templating, regex profiling and others.</p>

      <p><a href="https://github.com/Koceto1973/Forkify" target="_blank">This</a> single web page view app is
        based on the Food2Fork.com API to search and select meal recipes. MVC pattern was implemented, starting
        with setting up the dev tools first: Node.js and NPM came in, then Webpack and it's CLI and dev server,
        Babel. Then Axios, Fractional, Uniqid were put in use. App state variable was used, ES6 style coding,
        Ajax calls with async/await. Pretty much lots of DOM manipulation, gizmos like activity indicators,
        page results pagination, eval function, combining events in a single one, destructuring,
        lots of Array kinky methods were used. LocalStorage object helped preserving data through sessions.</p>

      <p><a href="https://github.com/Koceto1973/Budjet-app" target="_blank">This</a> single web page view
        budget app represents monthly income/ expense sheet. Apart from combining lots of object and functions
        material, the main take away of it was the separete attention to app architecture as a leading priority
        during code base build-up. This paid off in a pleasant work flow during implementing the functional
        programing style of app modules. Lots of DOM manipulations took place - queries, insertion and removal
        of elements, classes and formats. There were also date functions, arrays and strings extended functionalities.
       </p>

       <p>That was indeed a simple 'did you know' pop-up quiz functionality. Could be easily
        enhanced to complete app, but I kept it minimal reporting the quiz score just to console,
        obeying it's initial IIFE design. Questions data base is just presentational.
        <a href="https://github.com/Koceto1973/refresherQuiz" target="_blank">Here</a> it is on GitHub.
       </p>

       <p>Being impatient after the basic intro componets tasks, it was a real pleasure to jump
         into this funny starter project, the popular pig-game in browser format. I did extend it's
         functionality to choose game play with one die/ two dice and adjustable goal score.
         There were ideas to amend it with game rules sheet and some gizmo animations/ sounds,
         but anyhow I kept the accent on js code here, hurrying for the next one :)
         <a href="https://github.com/Koceto1973/Pig-Game" target="_blank">Here</a> it is on GitHub.
       </p>

    </div>

    {{> footer }}

  </body>

</html>
